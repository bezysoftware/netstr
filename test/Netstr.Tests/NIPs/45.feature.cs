// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Netstr.Tests.NIPs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class NIP_45Feature : object, Xunit.IClassFixture<NIP_45Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "45.feature"
#line hidden
        
        public NIP_45Feature(NIP_45Feature.FixtureData fixtureData, Netstr_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NIPs", "NIP-45", "\tRelays may support the verb COUNT, which provides a mechanism for obtaining even" +
                    "t counts. ", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("a relay is running with AUTH enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        "PublicKey",
                        "PrivateKey"});
            table101.AddRow(new string[] {
                        "5758137ec7f38f3d6c3ef103e28cd9312652285dab3497fe5e5f6c5c0ef45e75",
                        "512a14752ed58380496920da432f1c0cdad952cd4afda3d9bfa51c2051f91b02"});
#line 6
 testRunner.And("Alice is connected to relay", ((string)(null)), table101, "And ");
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "PublicKey",
                        "PrivateKey"});
            table102.AddRow(new string[] {
                        "5bc683a5d12133a96ac5502c15fe1c2287986cff7baf6283600360e6bb01f627",
                        "3551fc7617f76632e4542992c0bc01fecb224de639c4b6a1e0956946e8bb8a29"});
#line 9
 testRunner.And("Bob is connected to relay", ((string)(null)), table102, "And ");
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "PublicKey",
                        "PrivateKey"});
            table103.AddRow(new string[] {
                        "fe8d7a5726ea97ce6140f9fb06b1fe7d3259bcbf8de42c2a5d2ec9f8f0e2f614",
                        "f77f81a6a223eb15f81fee569161a4f729401a9cbc31bb69fef6a949b9d3c23a"});
#line 12
 testRunner.And("Charlie is connected to relay", ((string)(null)), table103, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Counting followers")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-45")]
        [Xunit.TraitAttribute("Description", "Counting followers")]
        public void CountingFollowers()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Counting followers", "\tBob follows Alice, Charlie follows Bob. Alice\'s follower count should be 1", tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Tags",
                            "Kind",
                            "CreatedAt"});
                table104.AddRow(new string[] {
                            "d589498c49776340a9bf83f63cc4cf960a17360cc3d9fd2a2ec2de4f11ba82b4",
                            "",
                            "[[\"p\",\"5758137ec7f38f3d6c3ef103e28cd9312652285dab3497fe5e5f6c5c0ef45e75\"]]",
                            "3",
                            "1722337838"});
#line 18
 testRunner.When("Bob publishes an event", ((string)(null)), table104, "When ");
#line hidden
                TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Tags",
                            "Kind",
                            "CreatedAt"});
                table105.AddRow(new string[] {
                            "2ef0ecd7341f5fdb5634210a4505d1c4ba25cb6ff4721282fd45412f93842c66",
                            "",
                            "[[\"p\",\"5bc683a5d12133a96ac5502c15fe1c2287986cff7baf6283600360e6bb01f627\"]]",
                            "3",
                            "1722337838"});
#line 21
 testRunner.And("Charlie publishes an event", ((string)(null)), table105, "And ");
#line hidden
                TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                            "Kinds",
                            "#p"});
                table106.AddRow(new string[] {
                            "3",
                            "5758137ec7f38f3d6c3ef103e28cd9312652285dab3497fe5e5f6c5c0ef45e75"});
#line 24
 testRunner.And("Alice sends a count message abcd", ((string)(null)), table106, "And ");
#line hidden
                TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "Count"});
                table107.AddRow(new string[] {
                            "AUTH",
                            "*",
                            ""});
                table107.AddRow(new string[] {
                            "COUNT",
                            "abcd",
                            "1"});
#line 27
 testRunner.Then("Alice receives a message", ((string)(null)), table107, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Counting DMs is rejected when not authenticated")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-45")]
        [Xunit.TraitAttribute("Description", "Counting DMs is rejected when not authenticated")]
        public void CountingDMsIsRejectedWhenNotAuthenticated()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Counting DMs is rejected when not authenticated", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                            "Kinds"});
                table108.AddRow(new string[] {
                            "4"});
#line 33
 testRunner.When("Alice sends a count message abcd", ((string)(null)), table108, "When ");
#line hidden
                TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "Count"});
                table109.AddRow(new string[] {
                            "AUTH",
                            "*",
                            ""});
                table109.AddRow(new string[] {
                            "CLOSED",
                            "abcd",
                            ""});
#line 36
 testRunner.Then("Alice receives a message", ((string)(null)), table109, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Counting someone elses DMs returns only those from me")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-45")]
        [Xunit.TraitAttribute("Description", "Counting someone elses DMs returns only those from me")]
        public void CountingSomeoneElsesDMsReturnsOnlyThoseFromMe()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Counting someone elses DMs returns only those from me", "\tBob sends a DM to Charlie\r\n\tAlice sends a DM to Charlie\r\n\tAlice tries to count a" +
                    "ll Charlie\'s DMs but only those from her are counted\r\n\tCharlie counts his own DM" +
                    "s which should return count of all", tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 46
 testRunner.When("Alice publishes an AUTH event for the challenge sent by relay", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
 testRunner.And("Charlie publishes an AUTH event for the challenge sent by relay", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "Tags",
                            "CreatedAt"});
                table110.AddRow(new string[] {
                            "a8b0f9d313888642257af20fc4dbe4a3d71d3c3a72bcfc06c540a235172b7f37",
                            "Charlie\'s Secret",
                            "4",
                            "[[\"p\",\"fe8d7a5726ea97ce6140f9fb06b1fe7d3259bcbf8de42c2a5d2ec9f8f0e2f614\"]]",
                            "1722337838"});
#line 48
 testRunner.And("Bob publishes an event", ((string)(null)), table110, "And ");
#line hidden
                TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "Tags",
                            "CreatedAt"});
                table111.AddRow(new string[] {
                            "7b0535b94878efb18b7c7a13630db8227e30961aed6f5556823b612423d676af",
                            "Charlie\'s Secret",
                            "4",
                            "[[\"p\",\"fe8d7a5726ea97ce6140f9fb06b1fe7d3259bcbf8de42c2a5d2ec9f8f0e2f614\"]]",
                            "1722337838"});
#line 51
 testRunner.And("Alice publishes an event", ((string)(null)), table111, "And ");
#line hidden
                TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                            "Kinds",
                            "#p"});
                table112.AddRow(new string[] {
                            "4",
                            "fe8d7a5726ea97ce6140f9fb06b1fe7d3259bcbf8de42c2a5d2ec9f8f0e2f614"});
#line 54
 testRunner.And("Alice sends a count message abcd", ((string)(null)), table112, "And ");
#line hidden
                TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                            "Kinds",
                            "#p"});
                table113.AddRow(new string[] {
                            "4",
                            "fe8d7a5726ea97ce6140f9fb06b1fe7d3259bcbf8de42c2a5d2ec9f8f0e2f614"});
#line 57
 testRunner.And("Charlie sends a count message abcd", ((string)(null)), table113, "And ");
#line hidden
                TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "Success",
                            "Count"});
                table114.AddRow(new string[] {
                            "AUTH",
                            "*",
                            "",
                            ""});
                table114.AddRow(new string[] {
                            "OK",
                            "*",
                            "true",
                            ""});
                table114.AddRow(new string[] {
                            "OK",
                            "7b0535b94878efb18b7c7a13630db8227e30961aed6f5556823b612423d676af",
                            "true",
                            ""});
                table114.AddRow(new string[] {
                            "COUNT",
                            "abcd",
                            "",
                            "1"});
#line 60
 testRunner.Then("Alice receives messages", ((string)(null)), table114, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "Success",
                            "Count"});
                table115.AddRow(new string[] {
                            "AUTH",
                            "*",
                            "",
                            ""});
                table115.AddRow(new string[] {
                            "OK",
                            "*",
                            "true",
                            ""});
                table115.AddRow(new string[] {
                            "COUNT",
                            "abcd",
                            "",
                            "2"});
#line 66
 testRunner.And("Charlie receives messages", ((string)(null)), table115, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                NIP_45Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                NIP_45Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
