// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Netstr.Tests.NIPs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class NIP_119Feature : object, Xunit.IClassFixture<NIP_119Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "119.feature"
#line hidden
        
        public NIP_119Feature(NIP_119Feature.FixtureData fixtureData, Netstr_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NIPs", "NIP-119", "\tEnable AND within a single tag filter by using an & modifier in filters for inde" +
                    "xable tags.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("a relay is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "PublicKey",
                        "PrivateKey"});
            table72.AddRow(new string[] {
                        "5758137ec7f38f3d6c3ef103e28cd9312652285dab3497fe5e5f6c5c0ef45e75",
                        "512a14752ed58380496920da432f1c0cdad952cd4afda3d9bfa51c2051f91b02"});
#line 6
 testRunner.And("Alice is connected to relay", ((string)(null)), table72, "And ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "PublicKey",
                        "PrivateKey"});
            table73.AddRow(new string[] {
                        "5bc683a5d12133a96ac5502c15fe1c2287986cff7baf6283600360e6bb01f627",
                        "3551fc7617f76632e4542992c0bc01fecb224de639c4b6a1e0956946e8bb8a29"});
#line 9
 testRunner.And("Bob is connected to relay", ((string)(null)), table73, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Tag filter with & is treated as AND")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-119")]
        [Xunit.TraitAttribute("Description", "Tag filter with & is treated as AND")]
        public void TagFilterWithIsTreatedAsAND()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tag filter with & is treated as AND", "\tAlice asks for events tagged with both \"meme\" AND \"cat\" that have the tag \"black" +
                    "\" OR \"white\"", tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "Tags",
                            "CreatedAt"});
                table74.AddRow(new string[] {
                            "828a22e778269e7ba35ae7fa8b23d9506561700f176677f7a8dc7858282f4be3",
                            "Cute cat",
                            "1",
                            "[[\"t\", \"meme\"], [\"t\", \"cat\"], [\"t\", \"black\"]]",
                            "1722337838"});
                table74.AddRow(new string[] {
                            "d711c1bdaf9fc9aa9a1b91580d98991531e95d22870817ba122d248b4151fde8",
                            "Cute dog",
                            "1",
                            "[[\"t\", \"meme\"], [\"t\", \"dog\"], [\"t\", \"black\"]]",
                            "1722337838"});
#line 15
 testRunner.When("Bob publishes events", ((string)(null)), table74, "When ");
#line hidden
                TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                            "Kinds",
                            "&t",
                            "#t"});
                table75.AddRow(new string[] {
                            "1",
                            "meme,cat",
                            "black,white"});
#line 19
 testRunner.And("Alice sends a subscription request moarcats", ((string)(null)), table75, "And ");
#line hidden
                TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "Tags",
                            "CreatedAt"});
                table76.AddRow(new string[] {
                            "dad216b3cebb2754fcef13dfd6299879cd2b4cb7988e38e36bc01874c90fab47",
                            "Cute cat",
                            "1",
                            "[[\"t\", \"meme\"], [\"t\", \"cat\"], [\"t\", \"white\"]]",
                            "1722337840"});
                table76.AddRow(new string[] {
                            "a88cc99d717189d32aa5361386a0654a7b5a0c99f52e1377821bcf5302f64c76",
                            "Cute dog",
                            "1",
                            "[[\"t\", \"meme\"], [\"t\", \"dog\"], [\"t\", \"white\"]]",
                            "1722337840"});
#line 22
 testRunner.And("Bob publishes an event", ((string)(null)), table76, "And ");
#line hidden
                TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "EventId"});
                table77.AddRow(new string[] {
                            "EVENT",
                            "moarcats",
                            "828a22e778269e7ba35ae7fa8b23d9506561700f176677f7a8dc7858282f4be3"});
                table77.AddRow(new string[] {
                            "EOSE",
                            "moarcats",
                            ""});
                table77.AddRow(new string[] {
                            "EVENT",
                            "moarcats",
                            "dad216b3cebb2754fcef13dfd6299879cd2b4cb7988e38e36bc01874c90fab47"});
#line 26
 testRunner.Then("Alice receives messages", ((string)(null)), table77, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                NIP_119Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                NIP_119Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
