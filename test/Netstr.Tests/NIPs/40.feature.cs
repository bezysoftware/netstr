// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Netstr.Tests.NIPs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class NIP_40Feature : object, Xunit.IClassFixture<NIP_40Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "40.feature"
#line hidden
        
        public NIP_40Feature(NIP_40Feature.FixtureData fixtureData, Netstr_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NIPs", "NIP-40", "\tThe expiration tag enables users to specify a unix timestamp at which the messag" +
                    "e SHOULD be considered expired (by relays and clients) and SHOULD be deleted by " +
                    "relays.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("a relay is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "PublicKey",
                        "PrivateKey"});
            table93.AddRow(new string[] {
                        "5758137ec7f38f3d6c3ef103e28cd9312652285dab3497fe5e5f6c5c0ef45e75",
                        "512a14752ed58380496920da432f1c0cdad952cd4afda3d9bfa51c2051f91b02"});
#line 6
 testRunner.And("Alice is connected to relay", ((string)(null)), table93, "And ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "PublicKey",
                        "PrivateKey"});
            table94.AddRow(new string[] {
                        "5bc683a5d12133a96ac5502c15fe1c2287986cff7baf6283600360e6bb01f627",
                        "3551fc7617f76632e4542992c0bc01fecb224de639c4b6a1e0956946e8bb8a29"});
#line 9
 testRunner.And("Bob is connected to relay", ((string)(null)), table94, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unparsable expiration tag is ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-40")]
        [Xunit.TraitAttribute("Description", "Unparsable expiration tag is ignored")]
        public void UnparsableExpirationTagIsIgnored()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unparsable expiration tag is ignored", "\tEvent contains expiration tag but it\'s not a valid unix timestamp, it should be " +
                    "ignored and event is accepted", tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "Tags",
                            "CreatedAt"});
                table95.AddRow(new string[] {
                            "0921e0c46e637526c0cb2211cbab49a56a69373b0f86c2500ed530f1533df182",
                            "Test",
                            "1",
                            "[[\"expiration\",\"blah\"]]",
                            "1722337838"});
#line 15
 testRunner.When("Alice publishes events", ((string)(null)), table95, "When ");
#line hidden
                TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "Success"});
                table96.AddRow(new string[] {
                            "OK",
                            "0921e0c46e637526c0cb2211cbab49a56a69373b0f86c2500ed530f1533df182",
                            "true"});
#line 18
 testRunner.Then("Alice receives messages", ((string)(null)), table96, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Already expired event is rejected")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-40")]
        [Xunit.TraitAttribute("Description", "Already expired event is rejected")]
        public void AlreadyExpiredEventIsRejected()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Already expired event is rejected", "\tEvent contains expiration tag but it\'s not a valid unix timestamp, it should be " +
                    "ignored and event is accepted", tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "Tags",
                            "CreatedAt"});
                table97.AddRow(new string[] {
                            "4239479a101dbeb8f189dacd6e4638a11013b5a2fc0733901f83c9e84e611778",
                            "Test",
                            "1",
                            "[[\"expiration\",\"1231002905\"]]",
                            "1722337838"});
#line 24
 testRunner.When("Alice publishes events", ((string)(null)), table97, "When ");
#line hidden
                TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "Success"});
                table98.AddRow(new string[] {
                            "OK",
                            "4239479a101dbeb8f189dacd6e4638a11013b5a2fc0733901f83c9e84e611778",
                            "false"});
#line 27
 testRunner.Then("Alice receives messages", ((string)(null)), table98, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Expired event already saved in a relay is omitted from sub response")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-40")]
        [Xunit.TraitAttribute("Description", "Expired event already saved in a relay is omitted from sub response")]
        public void ExpiredEventAlreadySavedInARelayIsOmittedFromSubResponse()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Expired event already saved in a relay is omitted from sub response", "\tWe need to save an already expired event in the relay, that would be hard using " +
                    "the publishing step (relay would reject it)\r\n\tSo just introduce a new step for t" +
                    "his NIP which bypasses publishing and inserts directly into DB", tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "Tags",
                            "CreatedAt"});
                table99.AddRow(new string[] {
                            "4239479a101dbeb8f189dacd6e4638a11013b5a2fc0733901f83c9e84e611778",
                            "Test",
                            "1",
                            "[[\"expiration\",\"1231002905\"]]",
                            "1722337838"});
#line 34
 testRunner.Given("Bob previously published events", ((string)(null)), table99, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                            "Kinds"});
                table100.AddRow(new string[] {
                            "1"});
#line 37
 testRunner.When("Alice sends a subscription request abcd", ((string)(null)), table100, "When ");
#line hidden
                TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id"});
                table101.AddRow(new string[] {
                            "EOSE",
                            "abcd"});
#line 40
 testRunner.Then("Alice receives messages", ((string)(null)), table101, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                NIP_40Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                NIP_40Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
