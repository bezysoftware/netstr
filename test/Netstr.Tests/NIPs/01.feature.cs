// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Netstr.Tests.NIPs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class NIP_01Feature : object, Xunit.IClassFixture<NIP_01Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "01.feature"
#line hidden
        
        public NIP_01Feature(NIP_01Feature.FixtureData fixtureData, Netstr_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NIPs", "NIP-01", "\tDefines the basic protocol that should be implemented by everybody. ", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("a relay is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "PublicKey",
                        "PrivateKey"});
            table1.AddRow(new string[] {
                        "5758137ec7f38f3d6c3ef103e28cd9312652285dab3497fe5e5f6c5c0ef45e75",
                        "512a14752ed58380496920da432f1c0cdad952cd4afda3d9bfa51c2051f91b02"});
#line 6
 testRunner.And("Alice is connected to relay", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "PublicKey",
                        "PrivateKey"});
            table2.AddRow(new string[] {
                        "5bc683a5d12133a96ac5502c15fe1c2287986cff7baf6283600360e6bb01f627",
                        "3551fc7617f76632e4542992c0bc01fecb224de639c4b6a1e0956946e8bb8a29"});
#line 9
 testRunner.And("Bob is connected to relay", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "PublicKey",
                        "PrivateKey"});
            table3.AddRow(new string[] {
                        "fe8d7a5726ea97ce6140f9fb06b1fe7d3259bcbf8de42c2a5d2ec9f8f0e2f614",
                        "f77f81a6a223eb15f81fee569161a4f729401a9cbc31bb69fef6a949b9d3c23a"});
#line 12
 testRunner.And("Charlie is connected to relay", ((string)(null)), table3, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Invalid messages are discarded, valid ones accepted")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-01")]
        [Xunit.TraitAttribute("Description", "Invalid messages are discarded, valid ones accepted")]
        public void InvalidMessagesAreDiscardedValidOnesAccepted()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid messages are discarded, valid ones accepted", "\tRelay shouldn\'t broadcast messages with invalid Id or Signnature. It should also" +
                    " reply with OK false.\r\n\tThis also covers correct validation of events with speci" +
                    "al characters", tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Kinds"});
                table4.AddRow(new string[] {
                            "1"});
#line 19
 testRunner.When("Alice sends a subscription request abcd", ((string)(null)), table4, "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "CreatedAt",
                            "Signature",
                            "Tags"});
                table5.AddRow(new string[] {
                            "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
                            "Hello 1",
                            "1",
                            "1722337838",
                            "",
                            ""});
                table5.AddRow(new string[] {
                            "a6d166e834e78827af0770f31f15b13a772f281ad880f43ce12c24d4e3d0e346",
                            "Hello 1",
                            "1",
                            "1722337838",
                            "Invalid",
                            ""});
                table5.AddRow(new string[] {
                            "9a6b4cefcd17f3bf7fb03c02da044c628836a118c47d5b92503c1d2bdb796296",
                            "Hi \' \\\" \\b \\t \\r \n",
                            "1",
                            "1722337838",
                            "",
                            ""});
                table5.AddRow(new string[] {
                            "50ed63c449df67d89e9964a27a26abbf214ca155b03915067a5a0f75618802bb",
                            "Hello",
                            "1",
                            "1722337838",
                            "",
                            "[[]]"});
#line 22
 testRunner.And("Bob publishes events", ((string)(null)), table5, "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "Success"});
                table6.AddRow(new string[] {
                            "OK",
                            "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
                            "false"});
                table6.AddRow(new string[] {
                            "OK",
                            "a6d166e834e78827af0770f31f15b13a772f281ad880f43ce12c24d4e3d0e346",
                            "false"});
                table6.AddRow(new string[] {
                            "OK",
                            "9a6b4cefcd17f3bf7fb03c02da044c628836a118c47d5b92503c1d2bdb796296",
                            "true"});
                table6.AddRow(new string[] {
                            "OK",
                            "50ed63c449df67d89e9964a27a26abbf214ca155b03915067a5a0f75618802bb",
                            "false"});
#line 28
 testRunner.Then("Bob receives messages", ((string)(null)), table6, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "EventId"});
                table7.AddRow(new string[] {
                            "EOSE",
                            "abcd",
                            ""});
                table7.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "9a6b4cefcd17f3bf7fb03c02da044c628836a118c47d5b92503c1d2bdb796296"});
#line 34
 testRunner.And("Alice receives a message", ((string)(null)), table7, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Newly subscribed client receives matching events, EOSE and future events")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-01")]
        [Xunit.TraitAttribute("Description", "Newly subscribed client receives matching events, EOSE and future events")]
        public void NewlySubscribedClientReceivesMatchingEventsEOSEAndFutureEvents()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Newly subscribed client receives matching events, EOSE and future events", @"	Bob publishes events which are stored by the relay before any subscription exists. 
	Alice then connects to the relay and should receive the matching stored events and EOSE.
	Bob publishes a new event which should be broadcast to Alice. 
	Bob receives OK for all of his messages.", tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "CreatedAt"});
                table8.AddRow(new string[] {
                            "a6d166e834e78827af0770f31f15b13a772f281ad880f43ce12c24d4e3d0e346",
                            "Hello 1",
                            "1",
                            "1722337838"});
                table8.AddRow(new string[] {
                            "cb952d0ab727c3fcaf94e6809a64d1a27ff87cae5be583398ee7f0f1381d6b66",
                            "Hello MD",
                            "30023",
                            "1722337839"});
#line 44
 testRunner.When("Bob publishes events", ((string)(null)), table8, "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Kinds"});
                table9.AddRow(new string[] {
                            "1"});
#line 48
 testRunner.And("Alice sends a subscription request abcd", ((string)(null)), table9, "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "CreatedAt"});
                table10.AddRow(new string[] {
                            "8013e4630a69528007355f65e01936c9b761a4bbd9340b60a4bd0222b15b7cf3",
                            "Hello 2",
                            "1",
                            "1722337840"});
#line 51
 testRunner.And("Bob publishes an event", ((string)(null)), table10, "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "EventId"});
                table11.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "a6d166e834e78827af0770f31f15b13a772f281ad880f43ce12c24d4e3d0e346"});
                table11.AddRow(new string[] {
                            "EOSE",
                            "abcd",
                            ""});
                table11.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "8013e4630a69528007355f65e01936c9b761a4bbd9340b60a4bd0222b15b7cf3"});
#line 54
 testRunner.Then("Alice receives messages", ((string)(null)), table11, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "Success"});
                table12.AddRow(new string[] {
                            "OK",
                            "a6d166e834e78827af0770f31f15b13a772f281ad880f43ce12c24d4e3d0e346",
                            "true"});
                table12.AddRow(new string[] {
                            "OK",
                            "cb952d0ab727c3fcaf94e6809a64d1a27ff87cae5be583398ee7f0f1381d6b66",
                            "true"});
                table12.AddRow(new string[] {
                            "OK",
                            "8013e4630a69528007355f65e01936c9b761a4bbd9340b60a4bd0222b15b7cf3",
                            "true"});
#line 59
 testRunner.And("Bob receives messages", ((string)(null)), table12, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Closed subscriptions should no longer receive events")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-01")]
        [Xunit.TraitAttribute("Description", "Closed subscriptions should no longer receive events")]
        public void ClosedSubscriptionsShouldNoLongerReceiveEvents()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Closed subscriptions should no longer receive events", "\tAfter a subscription is closed the relay should no longer forward events for tha" +
                    "t subscription\r\n\tHowever it should still forward them for other existing subscri" +
                    "ptions", tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Kinds"});
                table13.AddRow(new string[] {
                            "1"});
#line 68
 testRunner.When("Alice sends a subscription request abcd", ((string)(null)), table13, "When ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Kinds"});
                table14.AddRow(new string[] {
                            "1"});
#line 71
 testRunner.And("Alice sends a subscription request efgh", ((string)(null)), table14, "And ");
#line hidden
#line 74
 testRunner.And("Alice closes a subscription abcd", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "CreatedAt"});
                table15.AddRow(new string[] {
                            "a6d166e834e78827af0770f31f15b13a772f281ad880f43ce12c24d4e3d0e346",
                            "Hello 1",
                            "1",
                            "1722337838"});
#line 75
 testRunner.And("Bob publishes an event", ((string)(null)), table15, "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "EventId"});
                table16.AddRow(new string[] {
                            "EOSE",
                            "abcd",
                            ""});
                table16.AddRow(new string[] {
                            "EOSE",
                            "efgh",
                            ""});
                table16.AddRow(new string[] {
                            "EVENT",
                            "efgh",
                            "a6d166e834e78827af0770f31f15b13a772f281ad880f43ce12c24d4e3d0e346"});
#line 78
 testRunner.Then("Alice receives a message", ((string)(null)), table16, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Events are treated differently based on their kind")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-01")]
        [Xunit.TraitAttribute("Description", "Events are treated differently based on their kind")]
        public void EventsAreTreatedDifferentlyBasedOnTheirKind()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Events are treated differently based on their kind", @"	Regular events are covered by other scenarios
	Replaceable events have a unique combination of PublicKey+Kind and only the last version should be stored
	Ephemeral events shouldn't be stored
	Addressable events have a unique combination of PublicKey+Kind+[d tag] and only the last version should be stored
	Relay should discard older versions of existing events
	Events returned for initial subscription request should be ordered by CreatedAt (newer first), then by Id lexically", tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Authors"});
                table17.AddRow(new string[] {
                            "5bc683a5d12133a96ac5502c15fe1c2287986cff7baf6283600360e6bb01f627"});
#line 91
 testRunner.When("Alice sends a subscription request abcd", ((string)(null)), table17, "When ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "Tags",
                            "CreatedAt"});
                table18.AddRow(new string[] {
                            "eb480e60d0d3da6197602fd9d40172414cac1a0e777909f4451cdf3ebb8def2b",
                            "First",
                            "0",
                            "",
                            "1722337838"});
                table18.AddRow(new string[] {
                            "7dbe9b166930f9d6bb08279b785c8b28a9bc9cf1a060b0a3813a6bd521efce8e",
                            "Second",
                            "0",
                            "",
                            "1722337839"});
                table18.AddRow(new string[] {
                            "a17c92627639d45cb31d2c63f7e1e852b37a753d27d59bae7522ffd0799e50fa",
                            "Third",
                            "0",
                            "",
                            "1722337837"});
                table18.AddRow(new string[] {
                            "5c05963d796eaeec7f72731a4c6c4241ed0f6e57b9ea4c640448efbaba34b8fc",
                            "Hello",
                            "20000",
                            "",
                            "1722337838"});
                table18.AddRow(new string[] {
                            "7e5931a00d6ebf4434515f32173feb98fc222a0cef55b8258acf01374984e37f",
                            "First",
                            "30000",
                            "[[ \"d\", \"a\" ]]",
                            "1722337837"});
                table18.AddRow(new string[] {
                            "7e62d0e5a7869b4aa5d0f1e5f58ba0ca09c9c907fce17850b1622f7bbb6f7bde",
                            "Second",
                            "30000",
                            "[[ \"d\", \"a\" ]]",
                            "1722337838"});
                table18.AddRow(new string[] {
                            "cbefb02df14d326dcf8a0b8cb16aa264a041502d25c1e1952ebe3c54fbe9c53c",
                            "Third",
                            "30000",
                            "[[ \"d\", \"b\" ]]",
                            "1722337839"});
                table18.AddRow(new string[] {
                            "8ba97fc616706391a663c60bb542427fdfaa1f743703077fb01439965fac751b",
                            "Fourth",
                            "30000",
                            "[[ \"d\", \"b\" ]]",
                            "1722337836"});
#line 94
 testRunner.And("Bob publishes events", ((string)(null)), table18, "And ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Authors"});
                table19.AddRow(new string[] {
                            "5bc683a5d12133a96ac5502c15fe1c2287986cff7baf6283600360e6bb01f627"});
#line 104
 testRunner.And("Charlie sends a subscription request abcd", ((string)(null)), table19, "And ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "EventId"});
                table20.AddRow(new string[] {
                            "EOSE",
                            "abcd",
                            ""});
                table20.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "eb480e60d0d3da6197602fd9d40172414cac1a0e777909f4451cdf3ebb8def2b"});
                table20.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "7dbe9b166930f9d6bb08279b785c8b28a9bc9cf1a060b0a3813a6bd521efce8e"});
                table20.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "5c05963d796eaeec7f72731a4c6c4241ed0f6e57b9ea4c640448efbaba34b8fc"});
                table20.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "7e5931a00d6ebf4434515f32173feb98fc222a0cef55b8258acf01374984e37f"});
                table20.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "7e62d0e5a7869b4aa5d0f1e5f58ba0ca09c9c907fce17850b1622f7bbb6f7bde"});
                table20.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "cbefb02df14d326dcf8a0b8cb16aa264a041502d25c1e1952ebe3c54fbe9c53c"});
#line 107
 testRunner.Then("Alice receives messages", ((string)(null)), table20, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "EventId"});
                table21.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "7dbe9b166930f9d6bb08279b785c8b28a9bc9cf1a060b0a3813a6bd521efce8e"});
                table21.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "cbefb02df14d326dcf8a0b8cb16aa264a041502d25c1e1952ebe3c54fbe9c53c"});
                table21.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "7e62d0e5a7869b4aa5d0f1e5f58ba0ca09c9c907fce17850b1622f7bbb6f7bde"});
                table21.AddRow(new string[] {
                            "EOSE",
                            "abcd",
                            ""});
#line 116
 testRunner.And("Charlie receives messages", ((string)(null)), table21, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Sending a subscription request with the same name restarts it")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-01")]
        [Xunit.TraitAttribute("Description", "Sending a subscription request with the same name restarts it")]
        public void SendingASubscriptionRequestWithTheSameNameRestartsIt()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending a subscription request with the same name restarts it", @"	Alice is initially subscribed to Bob (no events) but then resubscribes to Charlie
	Charlie previously published an event and publishes another one after Alice's new subscription
	Bob also publishes an event after Alice re-subscribes
	Alice should receive EOSE from Bob, then stored event+EOSE+new event from Charlie and no more events from Bob", tagsOfScenario, argumentsOfScenario, featureTags);
#line 123
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "CreatedAt"});
                table22.AddRow(new string[] {
                            "5138028d66a909d302d8283319eb2c0830b42694f6137f71c47c64b4bdab3ad1",
                            "Hello",
                            "1",
                            "1722337836"});
#line 128
 testRunner.When("Charlie publishes an event", ((string)(null)), table22, "When ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Authors"});
                table23.AddRow(new string[] {
                            "5bc683a5d12133a96ac5502c15fe1c2287986cff7baf6283600360e6bb01f627"});
#line 131
 testRunner.When("Alice sends a subscription request abcd", ((string)(null)), table23, "When ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Authors"});
                table24.AddRow(new string[] {
                            "fe8d7a5726ea97ce6140f9fb06b1fe7d3259bcbf8de42c2a5d2ec9f8f0e2f614"});
#line 134
 testRunner.And("Alice sends a subscription request abcd", ((string)(null)), table24, "And ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "CreatedAt"});
                table25.AddRow(new string[] {
                            "a56ce3b0684d78d3ebe3d6d3e06d3a82317b8f7fdde9830727ee914b582a6091",
                            "Hello again",
                            "1",
                            "1722337837"});
#line 137
 testRunner.And("Charlie publishes an event", ((string)(null)), table25, "And ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "CreatedAt"});
                table26.AddRow(new string[] {
                            "a6d166e834e78827af0770f31f15b13a772f281ad880f43ce12c24d4e3d0e346",
                            "Hello 1",
                            "1",
                            "1722337838"});
#line 140
 testRunner.And("Bob publishes events", ((string)(null)), table26, "And ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "EventId"});
                table27.AddRow(new string[] {
                            "EOSE",
                            "abcd",
                            ""});
                table27.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "5138028d66a909d302d8283319eb2c0830b42694f6137f71c47c64b4bdab3ad1"});
                table27.AddRow(new string[] {
                            "EOSE",
                            "abcd",
                            ""});
                table27.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "a56ce3b0684d78d3ebe3d6d3e06d3a82317b8f7fdde9830727ee914b582a6091"});
#line 143
 testRunner.Then("Alice receives messages", ((string)(null)), table27, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Relay can handle complex filters")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-01")]
        [Xunit.TraitAttribute("Description", "Relay can handle complex filters")]
        public void RelayCanHandleComplexFilters()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Relay can handle complex filters", "\tSubscription requests can contain multiple filter objects which are interpreted " +
                    "as || conditions", tagsOfScenario, argumentsOfScenario, featureTags);
#line 150
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "CreatedAt",
                            "Tags"});
                table28.AddRow(new string[] {
                            "a6d166e834e78827af0770f31f15b13a772f281ad880f43ce12c24d4e3d0e346",
                            "Hello 1",
                            "1",
                            "1722337838",
                            ""});
                table28.AddRow(new string[] {
                            "0f5ba539c8ebb386336bc259ddc5d268a4959b012f56e3a2dcc1f9ea48d3591c",
                            "",
                            "0",
                            "1722337850",
                            ""});
                table28.AddRow(new string[] {
                            "cb952d0ab727c3fcaf94e6809a64d1a27ff87cae5be583398ee7f0f1381d6b66",
                            "Hello MD",
                            "30023",
                            "1722337839",
                            ""});
                table28.AddRow(new string[] {
                            "dca906744526bef1de5fa0e9f58d0d09a0a79ccf281c3c91c0e36007ee724ba3",
                            "Tagged",
                            "1",
                            "1722337839",
                            "[[\"q\",\"q1\"],[\"q\",\"q2\"],[\"r\",\"r1\"]]"});
                table28.AddRow(new string[] {
                            "7f5657422743e4aac914ded6ad09bcdd3fb6f078cced67ca6c684ea38ee14989",
                            "Tagged",
                            "1",
                            "1722337839",
                            "[[\"q\",\"q1\"],[\"q\",\"q3\"]]"});
#line 152
 testRunner.When("Bob publishes events", ((string)(null)), table28, "When ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "CreatedAt"});
                table29.AddRow(new string[] {
                            "4a173b1eaaf881eccaf28d943d4d028a652603d0718282a9d877a8dbbff02965",
                            "Hello",
                            "30023",
                            "1722337835"});
                table29.AddRow(new string[] {
                            "5138028d66a909d302d8283319eb2c0830b42694f6137f71c47c64b4bdab3ad1",
                            "Hello",
                            "1",
                            "1722337836"});
                table29.AddRow(new string[] {
                            "a56ce3b0684d78d3ebe3d6d3e06d3a82317b8f7fdde9830727ee914b582a6091",
                            "Hello again",
                            "1",
                            "1722337837"});
#line 159
 testRunner.When("Charlie publishes events", ((string)(null)), table29, "When ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Ids",
                            "Authors",
                            "Kinds",
                            "Since",
                            "Until",
                            "Limit",
                            "#q",
                            "#r"});
                table30.AddRow(new string[] {
                            "",
                            "",
                            "",
                            "",
                            "",
                            "1",
                            "",
                            ""});
                table30.AddRow(new string[] {
                            "",
                            "fe8d7a5726ea97ce6140f9fb06b1fe7d3259bcbf8de42c2a5d2ec9f8f0e2f614",
                            "1,2",
                            "1722337830",
                            "1722337836",
                            "",
                            "",
                            ""});
                table30.AddRow(new string[] {
                            "a6d166e834e78827af0770f31f15b13a772f281ad880f43ce12c24d4e3d0e346",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table30.AddRow(new string[] {
                            "",
                            "",
                            "30023",
                            "",
                            "",
                            "",
                            "",
                            ""});
                table30.AddRow(new string[] {
                            "",
                            "5bc683a5d12133a96ac5502c15fe1c2287986cff7baf6283600360e6bb01f627",
                            "1",
                            "",
                            "",
                            "",
                            "q4,q1",
                            "r1"});
#line 164
 testRunner.And("Alice sends a subscription request abcd", ((string)(null)), table30, "And ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "EventId"});
                table31.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "0f5ba539c8ebb386336bc259ddc5d268a4959b012f56e3a2dcc1f9ea48d3591c"});
                table31.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "cb952d0ab727c3fcaf94e6809a64d1a27ff87cae5be583398ee7f0f1381d6b66"});
                table31.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "dca906744526bef1de5fa0e9f58d0d09a0a79ccf281c3c91c0e36007ee724ba3"});
                table31.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "a6d166e834e78827af0770f31f15b13a772f281ad880f43ce12c24d4e3d0e346"});
                table31.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "5138028d66a909d302d8283319eb2c0830b42694f6137f71c47c64b4bdab3ad1"});
                table31.AddRow(new string[] {
                            "EOSE",
                            "abcd",
                            ""});
#line 171
 testRunner.Then("Alice receives messages", ((string)(null)), table31, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Zero limit returns EOSE and future events")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-01")]
        [Xunit.TraitAttribute("Description", "Zero limit returns EOSE and future events")]
        public void ZeroLimitReturnsEOSEAndFutureEvents()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Zero limit returns EOSE and future events", "\tSetting filter\'s limit to 0 skips ", tagsOfScenario, argumentsOfScenario, featureTags);
#line 180
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "CreatedAt"});
                table32.AddRow(new string[] {
                            "a6d166e834e78827af0770f31f15b13a772f281ad880f43ce12c24d4e3d0e346",
                            "Hello 1",
                            "1",
                            "1722337838"});
#line 182
 testRunner.When("Bob publishes an event", ((string)(null)), table32, "When ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Authors",
                            "Limit"});
                table33.AddRow(new string[] {
                            "5bc683a5d12133a96ac5502c15fe1c2287986cff7baf6283600360e6bb01f627",
                            "0"});
#line 185
 testRunner.And("Alice sends a subscription request abcd", ((string)(null)), table33, "And ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "CreatedAt"});
                table34.AddRow(new string[] {
                            "0f5ba539c8ebb386336bc259ddc5d268a4959b012f56e3a2dcc1f9ea48d3591c",
                            "",
                            "0",
                            "1722337850"});
#line 188
 testRunner.When("Bob publishes an event", ((string)(null)), table34, "When ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "EventId"});
                table35.AddRow(new string[] {
                            "EOSE",
                            "abcd",
                            ""});
                table35.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "0f5ba539c8ebb386336bc259ddc5d268a4959b012f56e3a2dcc1f9ea48d3591c"});
#line 191
 testRunner.Then("Alice receives messages", ((string)(null)), table35, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                NIP_01Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                NIP_01Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
