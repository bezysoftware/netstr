// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Netstr.Tests.NIPs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class NIP_09Feature : object, Xunit.IClassFixture<NIP_09Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "09.feature"
#line hidden
        
        public NIP_09Feature(NIP_09Feature.FixtureData fixtureData, Netstr_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NIPs", "NIP-09", "\tA special event with kind 5, meaning \"deletion\" is defined as having a list of o" +
                    "ne or more e or a tags, \r\n\teach referencing an event the author is requesting to" +
                    " be deleted.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("a relay is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "PublicKey",
                        "PrivateKey"});
            table32.AddRow(new string[] {
                        "5758137ec7f38f3d6c3ef103e28cd9312652285dab3497fe5e5f6c5c0ef45e75",
                        "512a14752ed58380496920da432f1c0cdad952cd4afda3d9bfa51c2051f91b02"});
#line 7
 testRunner.And("Alice is connected to relay", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "PublicKey",
                        "PrivateKey"});
            table33.AddRow(new string[] {
                        "5bc683a5d12133a96ac5502c15fe1c2287986cff7baf6283600360e6bb01f627",
                        "3551fc7617f76632e4542992c0bc01fecb224de639c4b6a1e0956946e8bb8a29"});
#line 10
 testRunner.And("Bob is connected to relay", ((string)(null)), table33, "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "PublicKey",
                        "PrivateKey"});
            table34.AddRow(new string[] {
                        "fe8d7a5726ea97ce6140f9fb06b1fe7d3259bcbf8de42c2a5d2ec9f8f0e2f614",
                        "f77f81a6a223eb15f81fee569161a4f729401a9cbc31bb69fef6a949b9d3c23a"});
#line 13
 testRunner.And("Charlie is connected to relay", ((string)(null)), table34, "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Content",
                        "Kind",
                        "CreatedAt"});
            table35.AddRow(new string[] {
                        "8ed8cc390eaf6db9e0ae8f3bf720a80d81ae49f95f953a9a4e26a72dc7f4a2c5",
                        "Hello",
                        "1",
                        "1722337838"});
            table35.AddRow(new string[] {
                        "86aa1ac011362326d5fdda20645fffb9de853b5c315143ea3d4df0bcb6dec927",
                        "Later",
                        "1",
                        "1722337848"});
#line 16
 testRunner.When("Alice publishes events", ((string)(null)), table35, "When ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Deletion removes referenced regular events and is itself broadcast")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-09")]
        [Xunit.TraitAttribute("Description", "Deletion removes referenced regular events and is itself broadcast")]
        public void DeletionRemovesReferencedRegularEventsAndIsItselfBroadcast()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deletion removes referenced regular events and is itself broadcast", "\tDeletion event can contain multiple \"e\" tags referencing known and unknown event" +
                    "s", tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Kind",
                            "Tags",
                            "CreatedAt"});
                table36.AddRow(new string[] {
                            "04c4ee3333f6f4c59ee5d476e5c86d77922976ea0134c5e19eae665324f735c7",
                            "5",
                            "[[\"e\", \"8ed8cc390eaf6db9e0ae8f3bf720a80d81ae49f95f953a9a4e26a72dc7f4a2c5\"], [\"e\"," +
                                " \"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"]]",
                            "1722337845"});
#line 23
 testRunner.When("Alice publishes an event", ((string)(null)), table36, "When ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Authors"});
                table37.AddRow(new string[] {
                            "5758137ec7f38f3d6c3ef103e28cd9312652285dab3497fe5e5f6c5c0ef45e75"});
#line 26
 testRunner.And("Bob sends a subscription request abcd", ((string)(null)), table37, "And ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "EventId"});
                table38.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "86aa1ac011362326d5fdda20645fffb9de853b5c315143ea3d4df0bcb6dec927"});
                table38.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "04c4ee3333f6f4c59ee5d476e5c86d77922976ea0134c5e19eae665324f735c7"});
                table38.AddRow(new string[] {
                            "EOSE",
                            "abcd",
                            ""});
#line 29
 testRunner.Then("Bob receives messages", ((string)(null)), table38, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="It\'s not allowed to delete someone else\'s events")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-09")]
        [Xunit.TraitAttribute("Description", "It\'s not allowed to delete someone else\'s events")]
        public void ItsNotAllowedToDeleteSomeoneElsesEvents()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It\'s not allowed to delete someone else\'s events", "\tDeletion event might reference someone else\'s events, those shouldn\'t be deleted" +
                    "\r\n\tIf the deletion references other events which belong to the author, those sho" +
                    "uld be deleted ", tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "Tags",
                            "CreatedAt"});
                table39.AddRow(new string[] {
                            "a6d166e834e78827af0770f31f15b13a772f281ad880f43ce12c24d4e3d0e346",
                            "Hello 1",
                            "1",
                            "",
                            "1722337838"});
                table39.AddRow(new string[] {
                            "06f7797468cf1fde45dc438288d44418f416302e94dba22e31b8ef60b74f44bc",
                            "",
                            "5",
                            "[[\"e\", \"a6d166e834e78827af0770f31f15b13a772f281ad880f43ce12c24d4e3d0e346\"],[\"e\", " +
                                "\"8ed8cc390eaf6db9e0ae8f3bf720a80d81ae49f95f953a9a4e26a72dc7f4a2c5\"]]",
                            "1722337845"});
#line 38
 testRunner.When("Bob publishes an event", ((string)(null)), table39, "When ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Authors"});
                table40.AddRow(new string[] {
                            "5758137ec7f38f3d6c3ef103e28cd9312652285dab3497fe5e5f6c5c0ef45e75,5bc683a5d12133a9" +
                                "6ac5502c15fe1c2287986cff7baf6283600360e6bb01f627"});
#line 42
 testRunner.And("Charlie sends a subscription request abcd", ((string)(null)), table40, "And ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "EventId"});
                table41.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "86aa1ac011362326d5fdda20645fffb9de853b5c315143ea3d4df0bcb6dec927"});
                table41.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "06f7797468cf1fde45dc438288d44418f416302e94dba22e31b8ef60b74f44bc"});
                table41.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "8ed8cc390eaf6db9e0ae8f3bf720a80d81ae49f95f953a9a4e26a72dc7f4a2c5"});
                table41.AddRow(new string[] {
                            "EOSE",
                            "abcd",
                            ""});
#line 45
 testRunner.Then("Charlie receives messages", ((string)(null)), table41, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                NIP_09Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                NIP_09Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
