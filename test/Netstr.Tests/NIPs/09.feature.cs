// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Netstr.Tests.NIPs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class NIP_09Feature : object, Xunit.IClassFixture<NIP_09Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "09.feature"
#line hidden
        
        public NIP_09Feature(NIP_09Feature.FixtureData fixtureData, Netstr_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NIPs", "NIP-09", "\tA special event with kind 5, meaning \"deletion\" is defined as having a list of o" +
                    "ne or more e or a tags, \r\n\teach referencing an event the author is requesting to" +
                    " be deleted.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("a relay is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "PublicKey",
                        "PrivateKey"});
            table43.AddRow(new string[] {
                        "5758137ec7f38f3d6c3ef103e28cd9312652285dab3497fe5e5f6c5c0ef45e75",
                        "512a14752ed58380496920da432f1c0cdad952cd4afda3d9bfa51c2051f91b02"});
#line 7
 testRunner.And("Alice is connected to relay", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "PublicKey",
                        "PrivateKey"});
            table44.AddRow(new string[] {
                        "5bc683a5d12133a96ac5502c15fe1c2287986cff7baf6283600360e6bb01f627",
                        "3551fc7617f76632e4542992c0bc01fecb224de639c4b6a1e0956946e8bb8a29"});
#line 10
 testRunner.And("Bob is connected to relay", ((string)(null)), table44, "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "PublicKey",
                        "PrivateKey"});
            table45.AddRow(new string[] {
                        "fe8d7a5726ea97ce6140f9fb06b1fe7d3259bcbf8de42c2a5d2ec9f8f0e2f614",
                        "f77f81a6a223eb15f81fee569161a4f729401a9cbc31bb69fef6a949b9d3c23a"});
#line 13
 testRunner.And("Charlie is connected to relay", ((string)(null)), table45, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Deletion removes referenced regular events and is itself broadcast")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-09")]
        [Xunit.TraitAttribute("Description", "Deletion removes referenced regular events and is itself broadcast")]
        public void DeletionRemovesReferencedRegularEventsAndIsItselfBroadcast()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deletion removes referenced regular events and is itself broadcast", "\tDeletion event can contain multiple \"e\" tags referencing known and unknown event" +
                    "s", tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "Tags",
                            "CreatedAt"});
                table46.AddRow(new string[] {
                            "8ed8cc390eaf6db9e0ae8f3bf720a80d81ae49f95f953a9a4e26a72dc7f4a2c5",
                            "Hello",
                            "1",
                            "",
                            "1722337838"});
                table46.AddRow(new string[] {
                            "86aa1ac011362326d5fdda20645fffb9de853b5c315143ea3d4df0bcb6dec927",
                            "Later",
                            "1",
                            "",
                            "1722337848"});
                table46.AddRow(new string[] {
                            "04c4ee3333f6f4c59ee5d476e5c86d77922976ea0134c5e19eae665324f735c7",
                            "",
                            "5",
                            "[[\"e\", \"8ed8cc390eaf6db9e0ae8f3bf720a80d81ae49f95f953a9a4e26a72dc7f4a2c5\"], [\"e\"," +
                                " \"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"]]",
                            "1722337845"});
#line 19
 testRunner.When("Alice publishes events", ((string)(null)), table46, "When ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "Authors"});
                table47.AddRow(new string[] {
                            "5758137ec7f38f3d6c3ef103e28cd9312652285dab3497fe5e5f6c5c0ef45e75"});
#line 24
 testRunner.And("Bob sends a subscription request abcd", ((string)(null)), table47, "And ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "EventId"});
                table48.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "86aa1ac011362326d5fdda20645fffb9de853b5c315143ea3d4df0bcb6dec927"});
                table48.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "04c4ee3333f6f4c59ee5d476e5c86d77922976ea0134c5e19eae665324f735c7"});
                table48.AddRow(new string[] {
                            "EOSE",
                            "abcd",
                            ""});
#line 27
 testRunner.Then("Bob receives messages", ((string)(null)), table48, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Deletion removes referenced replaceable events and is itself broadcast")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-09")]
        [Xunit.TraitAttribute("Description", "Deletion removes referenced replaceable events and is itself broadcast")]
        public void DeletionRemovesReferencedReplaceableEventsAndIsItselfBroadcast()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deletion removes referenced replaceable events and is itself broadcast", @"	Deletion event can contain ""a"" tags referencing replaceable or addressable events,
	but only those which took place before the deletion event.
	If a newer event arives after it was previously deleted, it is saved.
	If a newer event which was created before the deleted event arrives, it is ignored.", tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Kind",
                            "Tags",
                            "CreatedAt"});
                table49.AddRow(new string[] {
                            "af3224801d0ea862ceb45e3d75998373ff8726541f133dd0bc5badc79c832e88",
                            "0",
                            "",
                            "1722337838"});
                table49.AddRow(new string[] {
                            "37b30f773a1a7ba1615f34482194a531eca4b3a353e7c73a8f0e08985f6a09e4",
                            "10000",
                            "",
                            "1722337840"});
                table49.AddRow(new string[] {
                            "a23d28af8e9395478f297bd649d71a80b3d6c6c2af2c1dc1c9036ac4f451263d",
                            "30000",
                            "[[ \"d\", \"a\" ]]",
                            "1722337835"});
                table49.AddRow(new string[] {
                            "8a75f74fe8798771c98c4c17b847f95e7ef28c7822b57e399bca41dc911f8baf",
                            "30000",
                            "[[ \"d\", \"b\" ]]",
                            "1722337840"});
                table49.AddRow(new string[] {
                            "9ead3323b0e26292d96b01bd6ed24cfea1973eceea878ad19c8d56e8916c625d",
                            "5",
                            "[[\"a\", \"5bc683a5d12133a96ac5502c15fe1c2287986cff7baf6283600360e6bb01f627:0:\"]]",
                            "1722337839"});
                table49.AddRow(new string[] {
                            "753a8fc529a44a82097d54012fd7a5c8d5d201cdb41ef1f77e3a7ff8cf70ab36",
                            "5",
                            "[[\"a\", \"5bc683a5d12133a96ac5502c15fe1c2287986cff7baf6283600360e6bb01f627:10000:\"]" +
                                "]",
                            "1722337839"});
                table49.AddRow(new string[] {
                            "6101fb0b269a4e3c0bfa79c853c07c081fbbcc9ed562a93359ad443a757183c4",
                            "5",
                            "[[\"a\", \"5bc683a5d12133a96ac5502c15fe1c2287986cff7baf6283600360e6bb01f627:30000:a\"" +
                                "]]",
                            "1722337839"});
                table49.AddRow(new string[] {
                            "5842861d68412d6fd994e7e11b1ddac08bfd84fdd4e82100b14c2dbc41739308",
                            "5",
                            "[[\"a\", \"5bc683a5d12133a96ac5502c15fe1c2287986cff7baf6283600360e6bb01f627:30000:b\"" +
                                "]]",
                            "1722337839"});
                table49.AddRow(new string[] {
                            "4a2a7d1fe9ea53ba1604eab98523f26eaee750a86983aa5fbe86614f9c5a2318",
                            "30000",
                            "[[ \"d\", \"a\" ]]",
                            "1722337836"});
#line 39
 testRunner.When("Bob publishes events", ((string)(null)), table49, "When ");
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "Authors"});
                table50.AddRow(new string[] {
                            "5bc683a5d12133a96ac5502c15fe1c2287986cff7baf6283600360e6bb01f627"});
#line 50
 testRunner.And("Alice sends a subscription request abcd", ((string)(null)), table50, "And ");
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "EventId"});
                table51.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "37b30f773a1a7ba1615f34482194a531eca4b3a353e7c73a8f0e08985f6a09e4"});
                table51.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "8a75f74fe8798771c98c4c17b847f95e7ef28c7822b57e399bca41dc911f8baf"});
                table51.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "5842861d68412d6fd994e7e11b1ddac08bfd84fdd4e82100b14c2dbc41739308"});
                table51.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "6101fb0b269a4e3c0bfa79c853c07c081fbbcc9ed562a93359ad443a757183c4"});
                table51.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "753a8fc529a44a82097d54012fd7a5c8d5d201cdb41ef1f77e3a7ff8cf70ab36"});
                table51.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "9ead3323b0e26292d96b01bd6ed24cfea1973eceea878ad19c8d56e8916c625d"});
                table51.AddRow(new string[] {
                            "EOSE",
                            "abcd",
                            ""});
#line 53
 testRunner.Then("Alice receives messages", ((string)(null)), table51, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="It\'s not allowed to delete someone else\'s events")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-09")]
        [Xunit.TraitAttribute("Description", "It\'s not allowed to delete someone else\'s events")]
        public void ItsNotAllowedToDeleteSomeoneElsesEvents()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It\'s not allowed to delete someone else\'s events", "\tDeletion event might reference someone else\'s events, those shouldn\'t be deleted" +
                    "\r\n\tIf the deletion references other events which belong to the author, those sho" +
                    "uld be deleted", tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "Tags",
                            "CreatedAt"});
                table52.AddRow(new string[] {
                            "8ed8cc390eaf6db9e0ae8f3bf720a80d81ae49f95f953a9a4e26a72dc7f4a2c5",
                            "Hello",
                            "1",
                            "",
                            "1722337838"});
                table52.AddRow(new string[] {
                            "86aa1ac011362326d5fdda20645fffb9de853b5c315143ea3d4df0bcb6dec927",
                            "Later",
                            "1",
                            "",
                            "1722337848"});
#line 66
 testRunner.When("Alice publishes events", ((string)(null)), table52, "When ");
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "Tags",
                            "CreatedAt"});
                table53.AddRow(new string[] {
                            "a6d166e834e78827af0770f31f15b13a772f281ad880f43ce12c24d4e3d0e346",
                            "Hello 1",
                            "1",
                            "",
                            "1722337838"});
                table53.AddRow(new string[] {
                            "06f7797468cf1fde45dc438288d44418f416302e94dba22e31b8ef60b74f44bc",
                            "",
                            "5",
                            "[[\"e\", \"a6d166e834e78827af0770f31f15b13a772f281ad880f43ce12c24d4e3d0e346\"],[\"e\", " +
                                "\"8ed8cc390eaf6db9e0ae8f3bf720a80d81ae49f95f953a9a4e26a72dc7f4a2c5\"]]",
                            "1722337845"});
#line 70
 testRunner.And("Bob publishes an event", ((string)(null)), table53, "And ");
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "Authors"});
                table54.AddRow(new string[] {
                            "5758137ec7f38f3d6c3ef103e28cd9312652285dab3497fe5e5f6c5c0ef45e75,5bc683a5d12133a9" +
                                "6ac5502c15fe1c2287986cff7baf6283600360e6bb01f627"});
#line 74
 testRunner.And("Charlie sends a subscription request abcd", ((string)(null)), table54, "And ");
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "EventId"});
                table55.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "86aa1ac011362326d5fdda20645fffb9de853b5c315143ea3d4df0bcb6dec927"});
                table55.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "06f7797468cf1fde45dc438288d44418f416302e94dba22e31b8ef60b74f44bc"});
                table55.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "8ed8cc390eaf6db9e0ae8f3bf720a80d81ae49f95f953a9a4e26a72dc7f4a2c5"});
                table55.AddRow(new string[] {
                            "EOSE",
                            "abcd",
                            ""});
#line 77
 testRunner.Then("Charlie receives messages", ((string)(null)), table55, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Deleting a deletion has no affect")]
        [Xunit.TraitAttribute("FeatureTitle", "NIP-09")]
        [Xunit.TraitAttribute("Description", "Deleting a deletion has no affect")]
        public void DeletingADeletionHasNoAffect()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deleting a deletion has no affect", "\tClients and relays are not obliged to support \"undelete\" functionality", tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Content",
                            "Kind",
                            "Tags",
                            "CreatedAt"});
                table56.AddRow(new string[] {
                            "8ed8cc390eaf6db9e0ae8f3bf720a80d81ae49f95f953a9a4e26a72dc7f4a2c5",
                            "Hello",
                            "1",
                            "",
                            "1722337838"});
                table56.AddRow(new string[] {
                            "86aa1ac011362326d5fdda20645fffb9de853b5c315143ea3d4df0bcb6dec927",
                            "Later",
                            "1",
                            "",
                            "1722337848"});
                table56.AddRow(new string[] {
                            "367ca4fcb31777b20fffc7057ca10e3f251322022b57fc4c123ecbf423f3b529",
                            "",
                            "5",
                            "[[\"e\", \"8ed8cc390eaf6db9e0ae8f3bf720a80d81ae49f95f953a9a4e26a72dc7f4a2c5\"]]",
                            "1722337845"});
                table56.AddRow(new string[] {
                            "254ab6e975fc906256f9f318e50c450cd745745031459bddb027c655124302a7",
                            "",
                            "5",
                            "[[\"e\", \"367ca4fcb31777b20fffc7057ca10e3f251322022b57fc4c123ecbf423f3b529\"]]",
                            "1722337845"});
#line 86
 testRunner.When("Alice publishes events", ((string)(null)), table56, "When ");
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "Authors"});
                table57.AddRow(new string[] {
                            "5758137ec7f38f3d6c3ef103e28cd9312652285dab3497fe5e5f6c5c0ef45e75,5bc683a5d12133a9" +
                                "6ac5502c15fe1c2287986cff7baf6283600360e6bb01f627"});
#line 92
 testRunner.And("Charlie sends a subscription request abcd", ((string)(null)), table57, "And ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Id",
                            "EventId"});
                table58.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "86aa1ac011362326d5fdda20645fffb9de853b5c315143ea3d4df0bcb6dec927"});
                table58.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "254ab6e975fc906256f9f318e50c450cd745745031459bddb027c655124302a7"});
                table58.AddRow(new string[] {
                            "EVENT",
                            "abcd",
                            "367ca4fcb31777b20fffc7057ca10e3f251322022b57fc4c123ecbf423f3b529"});
                table58.AddRow(new string[] {
                            "EOSE",
                            "abcd",
                            ""});
#line 95
 testRunner.Then("Charlie receives messages", ((string)(null)), table58, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                NIP_09Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                NIP_09Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
