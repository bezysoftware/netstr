// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Netstr.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Netstr.Data.Migrations
{
    [DbContext(typeof(NetstrDbContext))]
    partial class NetstrDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Netstr.Data.EventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EventCreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventDeduplication")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EventExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("EventKind")
                        .HasColumnType("bigint");

                    b.Property<string>("EventPublicKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventSignature")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("FirstSeen")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EventId" }, "EventIdIdx")
                        .IsUnique();

                    b.HasIndex(new[] { "EventPublicKey", "EventKind", "EventDeduplication" }, "ReplaceableEventsIdx")
                        .IsUnique()
                        .HasFilter("\r\n                    (\"EventKind\" = 0) OR \r\n                    (\"EventKind\" = 3) OR \r\n                    (\"EventKind\" >= 10000 AND \"EventKind\" < 20000) OR \r\n                    (\"EventKind\" >= 30000 AND \"EventKind\" < 40000)");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Netstr.Data.TagEntity", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string[]>("Values")
                        .HasColumnType("text[]");

                    b.HasKey("EventId", "Name", "Values");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Netstr.Data.TagEntity", b =>
                {
                    b.HasOne("Netstr.Data.EventEntity", "Event")
                        .WithMany("Tags")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Netstr.Data.EventEntity", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
